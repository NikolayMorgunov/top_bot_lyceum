# -*- python -*-
from buildbot.plugins import *
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand

REPO_LINK = 'git://github.com/mesenev/top_bot_lyceum.git'
c = BuildmasterConfig = {}

# WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [worker.Worker("example-worker", "pass")]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot version of a python hello-world project.

c['change_source'] = [changes.GitPoller(REPO_LINK, workdir='dev-branch', branch='development', pollinterval=300)]

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = [
    schedulers.SingleBranchScheduler(name="all", change_filter=util.ChangeFilter(branch='master'),
                                     treeStableTimer=None,
                                     builderNames=["build-dev"]),

    schedulers.ForceScheduler(name="force", builderNames=["build-dev"])
]

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

factory = util.BuildFactory()
# check out the source


factory.addStep(Git(name='fetch', mode='incremental', repourl=REPO_LINK, haltOnFailure=True))

factory.addStep(ShellCommand(command=["echo", "privet"], haltOnFailure=True))

factory.addStep(ShellCommand(command=["pip", "install", "-r", "requirements.txt"],
                             env={"PATH": "{HOME}/buildbot/bbv/bin"}, haltOnFailure=True))
factory.addStep(ShellCommand(command=["python", "-m", "unittest", "discover", "--pattern=*tests.py"],
                             env={"PATH": "{HOME}/buildbot/bbv/bin"}, haltOnFailure=True))
factory.addStep(ShellCommand(command=["nohup", "python" "bot.py"],
                             env={"PATH": "{HOME}/buildbot/bbv/bin"}, haltOnFailure=True))

c['builders'] = [
    util.BuilderConfig(name="build-dev", workernames=["example-worker"], factory=factory),
]

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Lyceum Telegram Bot"
c['titleURL'] = "https://github.com/mesenev/top_bot_lyceum"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://localhost:8010/"

# minimalistic config to activate new web UI
c['www'] = dict(port=8010,
                plugins=dict(waterfall_view={}, console_view={}, grid_view={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url': "sqlite:///state.sqlite",
}
